"""
Sistema de Gestión de Inventarios con Persistencia de Datos

Este sistema permite gestionar un inventario de productos con las siguientes funcionalidades:
1. Agregar nuevos productos (guardado automático en archivo)
2. Eliminar productos existentes
3. Actualizar cantidad y precio de productos
4. Buscar productos por nombre
5. Mostrar listado completo del inventario

Características principales:
- Persistencia de datos usando archivos JSON
- Manejo robusto de excepciones
- Validación de datos de entrada
- Retroalimentación clara al usuario

Estructura del programa:
1. Clase Producto: Maneja la información individual de cada producto
2. Clase Inventario: Gestiona la colección de productos y operaciones de archivo
3. Función menu_principal: Interfaz de usuario en consola

Uso del programa:
1. Al iniciar, carga automáticamente el inventario desde el archivo
2. Permite realizar operaciones a través de un menú interactivo
3. Guarda automáticamente los cambios después de cada operación
4. Maneja errores de forma segura y notifica al usuario
"""

from typing import List, Optional
import sys
import json
import os

class Producto:
    """
    Clase para manejar productos individuales.
    
    Atributos:
        _id (int): Identificador único del producto
        _nombre (str): Nombre del producto
        _cantidad (int): Cantidad en inventario
        _precio (float): Precio unitario
    """
    def __init__(self, id: int, nombre: str, cantidad: int, precio: float):
        """
        Constructor que inicializa un nuevo producto.
        Valida que cantidad y precio no sean negativos.
        """
        self._id = id
        self._nombre = nombre
        self._cantidad = cantidad
        self._precio = precio

    # Getters usando decorador @property para acceso seguro a atributos
    @property
    def id(self) -> int:
        """Retorna el ID del producto."""
        return self._id

    @property
    def nombre(self) -> str:
        """Retorna el nombre del producto."""
        return self._nombre

    @property
    def cantidad(self) -> int:
        """Retorna la cantidad en inventario."""
        return self._cantidad

    @property
    def precio(self) -> float:
        """Retorna el precio unitario."""
        return self._precio

    # Setters con validación de datos
    @cantidad.setter
    def cantidad(self, nueva_cantidad: int):
        """
        Actualiza la cantidad verificando que no sea negativa.
        Lanza ValueError si la cantidad es inválida.
        """
        if nueva_cantidad < 0:
            raise ValueError("La cantidad no puede ser negativa")
        self._cantidad = nueva_cantidad

    @precio.setter
    def precio(self, nuevo_precio: float):
        """
        Actualiza el precio verificando que no sea negativo.
        Lanza ValueError si el precio es inválido.
        """
        if nuevo_precio < 0:
            raise ValueError("El precio no puede ser negativo")
        self._precio = nuevo_precio

    def to_dict(self) -> dict:
        """
        Convierte el producto a diccionario para guardarlo en JSON.
        Retorna: Diccionario con los atributos del producto.
        """
        return {
            'id': self._id,
            'nombre': self._nombre,
            'cantidad': self._cantidad,
            'precio': self._precio
        }

    @classmethod
    def from_dict(cls, data: dict) -> 'Producto':
        """
        Método de clase que crea un producto desde un diccionario.
        Útil para cargar productos desde el archivo JSON.
        """
        return cls(
            id=data['id'],
            nombre=data['nombre'],
            cantidad=data['cantidad'],
            precio=data['precio']
        )

    def __str__(self) -> str:
        """
        Representación en string del producto para mostrar al usuario.
        """
        return f"ID: {self._id}, Nombre: {self._nombre}, Cantidad: {self._cantidad}, Precio: ${self._precio:.2f}"


class Inventario:
    """
    Clase que gestiona la colección de productos y operaciones de archivo.
    
    Atributos:
        _productos (List[Producto]): Lista de productos en inventario
        _archivo (str): Ruta del archivo de almacenamiento
    """
    def __init__(self, archivo: str = 'inventario.json'):
        """
        Constructor que inicializa el inventario y carga datos del archivo.
        Si el archivo no existe, crea un inventario vacío.
        """
        self._productos: List[Producto] = []
        self._archivo = archivo
        self.cargar_inventario()

    def cargar_inventario(self) -> None:
        """
        Carga el inventario desde el archivo JSON.
        Maneja diversos errores posibles durante la carga.
        """
        try:
            if os.path.exists(self._archivo):
                with open(self._archivo, 'r') as f:
                    datos = json.load(f)
                    self._productos = [Producto.from_dict(p) for p in datos]
                print("Inventario cargado exitosamente.")
            else:
                print("No se encontró archivo de inventario. Se creará uno nuevo.")
        except PermissionError:
            print("Error: No hay permisos para leer el archivo de inventario.")
        except json.JSONDecodeError:
            print("Error: El archivo de inventario está corrupto.")
        except Exception as e:
            print(f"Error inesperado al cargar el inventario: {e}")

    def guardar_inventario(self) -> bool:
        """
        Guarda el inventario en el archivo JSON.
        Retorna: True si se guardó exitosamente, False si hubo error.
        """
        try:
            with open(self._archivo, 'w') as f:
                json.dump([p.to_dict() for p in self._productos], f, indent=2)
            return True
        except PermissionError:
            print("Error: No hay permisos para escribir en el archivo de inventario.")
            return False
        except Exception as e:
            print(f"Error inesperado al guardar el inventario: {e}")
            return False

    def agregar_producto(self, nombre: str, cantidad: int, precio: float) -> bool:
        """
        Agrega un nuevo producto al inventario y lo guarda en archivo.
        Genera ID automáticamente y valida datos de entrada.
        """
        nuevo_id = 1 if not self._productos else max(p.id for p in self._productos) + 1
        
        try:
            nuevo_producto = Producto(nuevo_id, nombre, cantidad, precio)
            self._productos.append(nuevo_producto)
            if self.guardar_inventario():
                print("Producto agregado y guardado exitosamente en el archivo.")
                return True
            return False
        except ValueError as e:
            print(f"Error al agregar producto: {e}")
            return False

    def eliminar_producto(self, id: int) -> bool:
        """
        Elimina un producto por su ID y actualiza el archivo.
        Retorna: True si se eliminó, False si no se encontró.
        """
        for i, producto in enumerate(self._productos):
            if producto.id == id:
                self._productos.pop(i)
                if self.guardar_inventario():
                    print("Producto eliminado y cambios guardados en el archivo.")
                    return True
                return False
        return False

    def actualizar_producto(self, id: int, nueva_cantidad: Optional[int] = None, 
                          nuevo_precio: Optional[float] = None) -> bool:
        """
        Actualiza cantidad y/o precio de un producto existente.
        Permite actualizar solo los campos necesarios.
        """
        for producto in self._productos:
            if producto.id == id:
                try:
                    if nueva_cantidad is not None:
                        producto.cantidad = nueva_cantidad
                    if nuevo_precio is not None:
                        producto.precio = nuevo_precio
                    if self.guardar_inventario():
                        print("Producto actualizado y cambios guardados en el archivo.")
                        return True
                    return False
                except ValueError as e:
                    print(f"Error al actualizar producto: {e}")
                    return False
        return False

    def buscar_productos(self, nombre: str) -> List[Producto]:
        """
        Busca productos por nombre (búsqueda parcial insensible a mayúsculas).
        Retorna: Lista de productos que coinciden con la búsqueda.
        """
        nombre = nombre.lower()
        return [p for p in self._productos if nombre in p.nombre.lower()]

    def mostrar_productos(self) -> None:
        """
        Muestra todos los productos en el inventario.
        Si no hay productos, muestra mensaje informativo.
        """
        if not self._productos:
            print("\nEl inventario está vacío.")
            return
        
        print("\nProductos en inventario:")
        for producto in self._productos:
            print(producto)


def menu_principal():
    """
    Función principal que maneja la interfaz de usuario.
    Muestra menú de opciones y procesa entrada del usuario.
    """
    try:
        # Inicializar el inventario al inicio del programa
        inventario = Inventario()
    except Exception as e:
        print(f"Error fatal al inicializar el inventario: {e}")
        sys.exit(1)
    
    while True:
        # Mostrar menú de opciones
        print("\n=== SISTEMA DE GESTIÓN DE INVENTARIOS ===")
        print("1. Agregar producto")
        print("2. Eliminar producto")
        print("3. Actualizar producto")
        print("4. Buscar productos")
        print("5. Mostrar todos los productos")
        print("6. Salir")
        
        try:
            opcion = input("\nSeleccione una opción (1-6): ")
            
            # Procesar opción seleccionada
            if opcion == "1":
                # Agregar nuevo producto
                nombre = input("Ingrese el nombre del producto: ")
                try:
                    cantidad = int(input("Ingrese la cantidad: "))
                    precio = float(input("Ingrese el precio: "))
                    inventario.agregar_producto(nombre, cantidad, precio)
                except ValueError:
                    print("Error: Cantidad y precio deben ser números válidos.")

            elif opcion == "2":
                # Eliminar producto existente
                try:
                    id = int(input("Ingrese el ID del producto a eliminar: "))
                    if not inventario.eliminar_producto(id):
                        print("No se encontró el producto con ese ID.")
                except ValueError:
                    print("Error: El ID debe ser un número entero.")

            elif opcion == "3":
                # Actualizar producto existente
                try:
                    id = int(input("Ingrese el ID del producto a actualizar: "))
                    nueva_cantidad = input("Ingrese nueva cantidad (Enter para mantener actual): ")
                    nuevo_precio = input("Ingrese nuevo precio (Enter para mantener actual): ")
                    
                    # Convertir solo los valores proporcionados
                    cantidad = int(nueva_cantidad) if nueva_cantidad else None
                    precio = float(nuevo_precio) if nuevo_precio else None
                    
                    if not inventario.actualizar_producto(id, cantidad, precio):
                        print("No se encontró el producto con ese ID.")
                except ValueError:
                    print("Error: Valores ingresados no válidos.")

            elif opcion == "4":
                # Buscar productos por nombre
                nombre = input("Ingrese el nombre o parte del nombre a buscar: ")
                productos = inventario.buscar_productos(nombre)
                if productos:
                    print("\nProductos encontrados:")
                    for producto in productos:
                        print(producto)
                else:
                    print("No se encontraron productos con ese nombre.")

            elif opcion == "5":
                # Mostrar todos los productos
                inventario.mostrar_productos()

            elif opcion == "6":
                # Salir del programa
                print("\n¡Gracias por usar el sistema de gestión de inventarios!")
                sys.exit(0)

            else:
                print("Opción no válida. Por favor, seleccione una opción del 1 al 6.")

        except Exception as e:
            print(f"Error inesperado: {e}")
            print("Por favor, intente nuevamente.")


# Punto de entrada del programa
if __name__ == "__main__":
    menu_principal()
