"""
Sistema de Gestión de Inventarios para Tienda

Este sistema permite gestionar un inventario de productos con las siguientes funcionalidades:
- Agregar nuevos productos con ID único autogenerado
- Eliminar productos existentes por ID
- Actualizar cantidad y precio de productos
- Buscar productos por nombre (búsqueda parcial)
- Mostrar listado completo del inventario

El sistema utiliza dos clases principales:
1. Producto: Para almacenar la información de cada producto
2. Inventario: Para gestionar la colección de productos y sus operaciones

Uso:
1. Ejecutar el script
2. Seleccionar la operación deseada del menú (1-6)
3. Seguir las instrucciones en pantalla para cada operación
"""

from typing import List, Optional  # Importamos tipos para anotaciones
import sys  # Importamos sys para salir del programa

class Producto:
    """
    Clase que representa un producto individual en el inventario.
    Almacena y gestiona la información básica de cada producto.
    
    Atributos:
        _id (int): Identificador único del producto
        _nombre (str): Nombre del producto
        _cantidad (int): Cantidad disponible en inventario
        _precio (float): Precio unitario del producto
    """
    def __init__(self, id: int, nombre: str, cantidad: int, precio: float):
        """
        Constructor de la clase Producto.
        Inicializa un nuevo producto con los valores proporcionados.
        """
        self._id = id
        self._nombre = nombre
        self._cantidad = cantidad
        self._precio = precio

    # Getters - Utilizamos @property para acceder a los atributos de forma segura
    @property
    def id(self) -> int:
        """Retorna el ID del producto."""
        return self._id

    @property
    def nombre(self) -> str:
        """Retorna el nombre del producto."""
        return self._nombre

    @property
    def cantidad(self) -> int:
        """Retorna la cantidad disponible del producto."""
        return self._cantidad

    @property
    def precio(self) -> float:
        """Retorna el precio del producto."""
        return self._precio

    # Setters - Incluyen validaciones para mantener la integridad de los datos
    @cantidad.setter
    def cantidad(self, nueva_cantidad: int):
        """
        Actualiza la cantidad del producto.
        Valida que la cantidad no sea negativa.
        """
        if nueva_cantidad < 0:
            raise ValueError("La cantidad no puede ser negativa")
        self._cantidad = nueva_cantidad

    @precio.setter
    def precio(self, nuevo_precio: float):
        """
        Actualiza el precio del producto.
        Valida que el precio no sea negativo.
        """
        if nuevo_precio < 0:
            raise ValueError("El precio no puede ser negativo")
        self._precio = nuevo_precio

    def __str__(self) -> str:
        """
        Retorna una representación en string del producto.
        Formato: ID: X, Nombre: Y, Cantidad: Z, Precio: $W
        """
        return f"ID: {self._id}, Nombre: {self._nombre}, Cantidad: {self._cantidad}, Precio: ${self._precio:.2f}"


class Inventario:
    """
    Clase que gestiona la colección completa de productos.
    Implementa todas las operaciones CRUD y búsquedas.
    
    Atributos:
        _productos (List[Producto]): Lista que almacena todos los productos
    """
    def __init__(self):
        """Constructor que inicializa una lista vacía de productos."""
        self._productos: List[Producto] = []

    def agregar_producto(self, nombre: str, cantidad: int, precio: float) -> bool:
        """
        Agrega un nuevo producto al inventario.
        Genera automáticamente un ID único incrementando el máximo ID existente.
        
        Retorna:
            bool: True si se agregó correctamente, False si hubo error
        """
        # Genera un nuevo ID único: si no hay productos usa 1, sino incrementa el máximo
        nuevo_id = 1 if not self._productos else max(p.id for p in self._productos) + 1
        
        try:
            nuevo_producto = Producto(nuevo_id, nombre, cantidad, precio)
            self._productos.append(nuevo_producto)
            return True
        except ValueError as e:
            print(f"Error al agregar producto: {e}")
            return False

    def eliminar_producto(self, id: int) -> bool:
        """
        Elimina un producto del inventario usando su ID.
        
        Retorna:
            bool: True si se eliminó el producto, False si no se encontró
        """
        for i, producto in enumerate(self._productos):
            if producto.id == id:
                self._productos.pop(i)
                return True
        return False

    def actualizar_producto(self, id: int, nueva_cantidad: Optional[int] = None, 
                          nuevo_precio: Optional[float] = None) -> bool:
        """
        Actualiza la cantidad y/o precio de un producto existente.
        Los parámetros opcionales permiten actualizar solo los campos necesarios.
        
        Retorna:
            bool: True si se actualizó correctamente, False si no se encontró o hubo error
        """
        for producto in self._productos:
            if producto.id == id:
                try:
                    if nueva_cantidad is not None:
                        producto.cantidad = nueva_cantidad
                    if nuevo_precio is not None:
                        producto.precio = nuevo_precio
                    return True
                except ValueError as e:
                    print(f"Error al actualizar producto: {e}")
                    return False
        return False

    def buscar_productos(self, nombre: str) -> List[Producto]:
        """
        Busca productos por nombre (búsqueda parcial e insensible a mayúsculas).
        Ejemplo: "manz" encontrará "Manzana" y "Manzanilla"
        
        Retorna:
            List[Producto]: Lista de productos que coinciden con la búsqueda
        """
        nombre = nombre.lower()
        return [p for p in self._productos if nombre in p.nombre.lower()]

    def mostrar_productos(self) -> None:
        """
        Muestra todos los productos en el inventario.
        Si el inventario está vacío, muestra un mensaje informativo.
        """
        if not self._productos:
            print("\nEl inventario está vacío.")
            return
        
        print("\nProductos en inventario:")
        for producto in self._productos:
            print(producto)


def menu_principal():
    """
    Función principal que muestra el menú interactivo y maneja la interacción con el usuario.
    Crea una instancia de Inventario y permite realizar todas las operaciones disponibles.
    """
    inventario = Inventario()
    
    while True:
        # Mostrar opciones del menú
        print("\n=== SISTEMA DE GESTIÓN DE INVENTARIOS ===")
        print("1. Agregar producto")
        print("2. Eliminar producto")
        print("3. Actualizar producto")
        print("4. Buscar productos")
        print("5. Mostrar todos los productos")
        print("6. Salir")
        
        opcion = input("\nSeleccione una opción (1-6): ")
        
        # Procesar la opción seleccionada
        if opcion == "1":
            # Agregar nuevo producto
            nombre = input("Ingrese el nombre del producto: ")
            try:
                cantidad = int(input("Ingrese la cantidad: "))
                precio = float(input("Ingrese el precio: "))
                if inventario.agregar_producto(nombre, cantidad, precio):
                    print("Producto agregado exitosamente.")
            except ValueError:
                print("Error: Cantidad y precio deben ser números válidos.")

        elif opcion == "2":
            # Eliminar producto existente
            try:
                id = int(input("Ingrese el ID del producto a eliminar: "))
                if inventario.eliminar_producto(id):
                    print("Producto eliminado exitosamente.")
                else:
                    print("No se encontró el producto con ese ID.")
            except ValueError:
                print("Error: El ID debe ser un número entero.")

        elif opcion == "3":
            # Actualizar producto existente
            try:
                id = int(input("Ingrese el ID del producto a actualizar: "))
                nueva_cantidad = input("Ingrese nueva cantidad (Enter para mantener actual): ")
                nuevo_precio = input("Ingrese nuevo precio (Enter para mantener actual): ")
                
                # Convertir solo los valores que se proporcionaron
                cantidad = int(nueva_cantidad) if nueva_cantidad else None
                precio = float(nuevo_precio) if nuevo_precio else None
                
                if inventario.actualizar_producto(id, cantidad, precio):
                    print("Producto actualizado exitosamente.")
                else:
                    print("No se encontró el producto con ese ID.")
            except ValueError:
                print("Error: Valores ingresados no válidos.")

        elif opcion == "4":
            # Buscar productos por nombre
            nombre = input("Ingrese el nombre o parte del nombre a buscar: ")
            productos = inventario.buscar_productos(nombre)
            if productos:
                print("\nProductos encontrados:")
                for producto in productos:
                    print(producto)
            else:
                print("No se encontraron productos con ese nombre.")

        elif opcion == "5":
            # Mostrar todos los productos
            inventario.mostrar_productos()

        elif opcion == "6":
            # Salir del programa
            print("\n¡Gracias por usar el sistema de gestión de inventarios!")
            sys.exit(0)

        else:
            print("Opción no válida. Por favor, seleccione una opción del 1 al 6.")


# Punto de entrada del programa
if __name__ == "__main__":
    menu_principal()
